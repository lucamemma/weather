{"version":3,"sources":["components/day.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["matchCode2Weather","code","toggleHoverState","e","type","target","classList","remove","contains","add","Day","dayData","header","city","Card","Body","Title","Provider","value","color","size","style","fontSize","fontWeight","className","weather","Math","floor","temp","app_max_temp","rh","onMouseEnter","onMouseLeave","textTransform","format","locale","datetime","Text","as","Footer","app_min_temp","Weather","weatherData","Container","Row","Col","lg","md","sm","xs","data","city_name","CardDeck","slice","length","map","day","i","App","useState","setData","getCityName","loc","document","location","pathname","split","search","par","URLSearchParams","Array","from","values","useEffect","a","new_city","api_call","fetch","then","res","json","result","catch","err","console","log","fetchData","Spinner","animation","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb25208a.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport {Card} from 'react-bootstrap';\nimport Moment from 'react-moment';\nimport 'moment/locale/it';\nimport { IconContext } from \"react-icons\";\nimport {FaMapMarkerAlt} from 'react-icons/fa'\n\nconst matchCode2Weather = (code) => {\n  if(code < 300){\n    return 'fulmini';\n  }\n  else if (code < 500) {\n    return 'pioggerella';\n  }\n  else if (code < 600){\n    return 'pioggia';\n  }\n  else if (code < 700){\n    return 'neve';\n  }\n  else if (code < 800){\n    return 'nebbia';\n  }\n  else if (code === 800){\n    return 'sole';\n  }\n  else if (code < 804){\n    return 'coperto';\n  }\n  else if (code === 804){\n    return 'nuvoloso';\n  }\n  else{\n    return 'precipitazioni';\n  }\n};\nfunction toggleHoverState(e){\n  if(e.type === \"mouseleave\"){\n    e.target.classList.remove('hover-reaction');\n  }\n  else{\n    if(e.target.classList.contains('card-wrapper')){\n      e.target.classList.add('hover-reaction');\n    }\n  }\n}\n\nconst Day = ({dayData, header, city}) => (\n  (header ?\n    (\n    <Card>\n      <Card.Body>\n        <Card.Title>\n            <IconContext.Provider value={{ color: \"white\", size: \"2em\" }}>\n              <div>\n                <span style={{fontSize:\"3em\", fontWeight: '300'}}><FaMapMarkerAlt size={'1em'}/> {city}</span>\n              </div>\n            </IconContext.Provider>\n        </Card.Title>\n        <div>\n          <div> <div className={matchCode2Weather(dayData.weather.code)+ \" icon-tempo big-icon\"}></div> </div>\n          <h1> {Math.floor(dayData.temp)}°</h1>\n          <div>Percepita: {Math.floor(dayData.app_max_temp)}°</div>\n          <div>Umidità: {dayData.rh} %</div>\n        </div>\n      </Card.Body>\n    </Card>\n    ):\n    (  \n      <div className={\"card-wrapper\"} onMouseEnter={toggleHoverState} onMouseLeave={toggleHoverState}>\n        <Card >\n            <Card.Body >\n              <Card.Title>\n                <div style={{textTransform: 'uppercase'}}>\n                  <Moment format=\"ddd D\" locale=\"it\">\n                    {dayData.datetime}\n                  </Moment>\n                </div>\n              \n              </Card.Title>\n              <Card.Text as={\"div\"}>\n              <div>\n                <div> <div className={matchCode2Weather(dayData.weather.code)+ \" icon-tempo\"}></div> </div>\n              </div>\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer>              \n              <div>{Math.floor(dayData.app_max_temp) + \"° - \" + Math.floor(dayData.app_min_temp) + \"°\"}</div>\n            </Card.Footer>\n        </Card>\n      </div>\n          \n      )\n    )\n  )\n  \nexport default Day;","import React from 'react';\nimport './styles.css';\nimport {  Row, Col, CardDeck, Container } from 'react-bootstrap';\nimport Day from './day';\n\n\nconst Weather = ({weatherData}) => (\n\n    <Container className=\"bgblur\">\n        <Row className={\"justified\"}>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <Day dayData={weatherData.data[0]} header={true}  city={weatherData.city_name}/>\n          </Col>\n        </Row>\n        <hr />\n        <Row className={\"justified\"}>\n          <CardDeck>\n        {weatherData.data.slice(1, weatherData.data.length).map((day, i) => {     \n           // Return the element. Also pass key     \n           return (<Day dayData={day} key={i}/>) \n        })}\n          </CardDeck>\n        </Row>\n    </Container>\n  )\n  \n  export default Weather;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nimport { Spinner } from 'react-bootstrap';\n\nfunction App() {\n\n  const [data, setData] = useState(null);\n\n  const state = 'Italy';\n  const APIKEY = \"edad788f999748dd986f2d4b76c75522\";\n\n  const getCityName = () => {\n    let loc = document.location;\n    if(loc.pathname!=='/weather/'){\n      return loc.pathname.split(\"/\")[2];\n    }\n    if(loc.search!==''){\n      let par = new URLSearchParams(loc.search);\n      return Array.from(par.values())[0];\n    }\n    return null;\n\n  };\n\n  useEffect(()=> {\n    let city = 'Rome';\n      const fetchData = async () => {\n          let root = \"https://api.weatherbit.io/v2.0/forecast/daily\";\n          let new_city = getCityName();\n          if(new_city){\n            city = new_city;\n          }\n          let api_call = `${root}?city=${city}&country=${state}&key=${APIKEY}&lang=it&days=8`\n          await fetch(api_call)\n          .then(res => res.json())\n          .then(result => {\n            setData(result)\n          }).catch((err) => {\n            console.log('Error occurred!');\n          });\n      };\n      if(!data){\n        fetchData();\n      }\n  });\n\n  return (\n    <div className=\"App\">\n      {(data ) ? (\n        <Weather weatherData={data} />\n      ): (\n        <Spinner animation=\"grow\" className={'verycenter'} variant=\"light\" />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}